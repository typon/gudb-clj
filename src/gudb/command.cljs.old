(ns gudb.flow
  (:require [gudb.streams :refer [app-state]]
            [gudb.constants :refer [prefix]]
            [gudb.gdb :refer [gdb-chan gdb-stdout-sub]]
            [cljs.core.async :refer [chan <! >! put!]])
  (:require-macros [cljs.core.async.macros :refer [go go-loop]])

  (:use-macros [shrimp-log.macros :only [trace debug spy info]]))



(defrecord Input-Box-Keypress [key-obj]
  ptk/UpdateEvent
  (update [_ state]
  (let [[curr-text] [(.-value (get-in state [:elements :input-box]))]]
    (case (get key-obj "full")
      ; do nothing if enter was just pressed. This is handled in submit
      "return" ()
      "enter" ()
      "tab" (->Auto-Box-Scroll :down)
      "S-tab" (->Auto-Box-Scroll :up)
      ; Default case
      (do
        (dispatch :auto-box-update curr-text)))
    (assoc state :input-box-value curr-text)))

;; State here is map, not atom!
(defmethod transform :auto-box-update
  [state curr-text]
  (let [[auto-box] [(get-in state [:elements :autocomplete-box])]
        [history-strings] [(:history-box-value state)]
        [state'] [(assoc-in state [:auto-box :interactive] false)]]
    (.setFront auto-box)
    (case curr-text
      "" (assoc-in state' [:auto-box :value] [])

      ; Default case
      ; Figure out the matches to the current
      ; text from the history box list and remove the ones that dont match
      (assoc-in state' [:auto-box :value] (into [] (distinct (remove nil? (map (fn [s] (re-matches (re-pattern (str "^" curr-text ".*")) s)) history-strings))))))))

(defmethod transform :auto-box-reset
  [state _]
  (let [[auto-box] [(get-in state [:elements :autocomplete-box])]
        [state'] [(assoc-in state [:auto-box :interactive] false)]]
    (.clearItems auto-box)
    (set! (.-selected auto-box) 0)
    (assoc-in state' [:auto-box :value] [])))

(defmethod transform :auto-box-scroll
  [state direction]
  (let [[auto-box] [(get-in state [:elements :autocomplete-box])]
        [screen] [(get-in state [:elements :screen])]
        [offset] [(case direction :down 1 :up -1)]]
    (.move auto-box offset)
    ; TODO: Making this render after select up/down declarative.
    (.render screen)
    (let [[curr-selected] [(when-let [item (aget (.-items auto-box) (spy :info (.-selected auto-box)))] (.-content (spy :info item)))]]
      (dispatch :input-box-reset curr-selected))
    (assoc-in state [:auto-box :interactive] true)))

(defmethod transform :input-box-reset
  [state text]
  (let [[input-box] [(get-in state [:elements :input-box])]]
    (.setValue input-box text)
    (.readInput input-box nil)
    (assoc state :input-box-value text)))

(defmethod transform :input-box-cancel
  [state _]
  (let [[input-box] [(get-in state [:elements :input-box])]]
    (dispatch :auto-box-reset nil)
    (.clearValue input-box)
    (assoc state :input-box-value "")))

(defmethod transform :input-box-submit
  [state text]
  (case text
    ("" nil) (do
               (dispatch :input-box-reset "")
               (identity state))
    (do
      (dispatch :history-box-append {:type :cmd :item text})
      (dispatch :input-box-reset "")
      (dispatch :auto-box-reset nil)
      (go (>! gdb-chan {:topic :cmd-sent :cmd text}))
      (identity state))))

(defmethod transform :history-box-append
  [state msg]
  (let [[history-box] [(get-in state [:elements :history-box])]
        [item] [(:item msg)]
        [disp-text] [(case (:type msg) :cmd (str prefix " " item) item)]]
    (.pushItem history-box disp-text)
    (.setScrollPerc history-box 100)
    (update-in state [:history-box-value] (fn [lst] (conj lst item)))))

; (defmethod transform :set-box-contents
;   [state args]
;   (let [[box-elem text] [(:el args) (:value args)]
;        [screen] [(get-in state [:elements :screen])]
;        ]
;     (.setContent box-elem text)
;     (.render screen)
;     state))

(defmethod transform :target-output-received
  [state msg]
  (let [[prog-output-box] [(get-in state [:elements :prog-output-box])]
        [{:keys [thread text]}] [msg]]
    (case text
      ("" nil) (do
                 (dispatch :input-box-reset "")
                 (identity state))
      (do
        (.log prog-output-box text)
        (update-in state [:prog-output-box-value] msg)))))


(defmethod transform :register-elem
  [state value]
  (assoc-in state [:elements (:el-name value)] (:el-obj value)))
